export default async function handler(req, res) {
  if (req.method !== 'POST') {
    console.log('❌ Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { emailText } = req.body;
  if (!emailText) {
    console.log('❌ Missing emailText in body');
    return res.status(400).json({ error: 'Missing emailText' });
  }

  const API_URL = 'https://api-inference.huggingface.co/models/google/flan-t5-large';
  const token = process.env.VITE_HUGGINGFACE_TOKEN;

  console.log('📤 Sending to Hugging Face...');
  console.log('✉️ Email Text:', emailText.slice(0, 100)); // Just the first 100 chars

  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: `Generate a short, polite reply to this email:\n\n${emailText}`,
      }),
    });

    console.log('📬 Hugging Face Status:', response.status);
    const data = await response.json();
    console.log('📨 Hugging Face Response:', JSON.stringify(data, null, 2));

    if (data.error) {
      console.log('❌ HF Model Error:', data.error);
      return res.status(500).json({ error: `Model error: ${data.error}` });
    }

    const reply = Array.isArray(data)
      ? data[0]?.generated_text
      : data?.generated_text;

    if (!reply) {
      console.log('❌ No reply generated');
      return res.status(500).json({ error: 'No reply generated by model.' });
    }

    console.log('✅ Generated Reply:', reply);
    return res.status(200).json({ reply });
  } catch (error) {
    console.error('❌ Network or Unexpected Error:', error);
    return res.status(500).json({ error: error.message || 'Internal server error' });
  }
}

    return res.status(200).json({ reply });
  } catch (error) {
    return res.status(500).json({ error: error.message || 'Internal server error' });
  }
}
